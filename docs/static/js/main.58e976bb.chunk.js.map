{"version":3,"sources":["componets/AddCategory.js","helpers/getGifs.js","componets/GifGridItem.js","componets/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","placeholder","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gift","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","c","ReactDOM","render","document","getElementById"],"mappings":"mMAEaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEXC,mBAAS,IAFE,mBAErCC,EAFqC,KAE1BC,EAF0B,KAY5C,OACI,sBAAMC,SATS,SAACC,GAChBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAQ,IAC7BR,GAAc,SAAAS,GAAU,OAAIP,GAAJ,mBAAkBO,OAC1CN,EAAc,MAId,SACI,uBACAO,KAAK,OACLC,YAAY,WACZC,MAAOV,EACPW,SAAU,SAACR,GAAD,OAAKF,EAAcE,EAAES,OAAOF,a,+BCnBrCG,EAAO,uCAAE,WAAMC,GAAN,uBAAAC,EAAA,6DACZC,EADY,gDACiCC,UAAWH,GAD5C,+DAECI,MAAMF,GAFP,cAEZG,EAFY,gBAGEA,EAAKC,OAHP,uBAGXC,EAHW,EAGXA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EACvB,MAAM,CACFC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATxB,kBAYXM,GAZW,4CAAF,sDCCPO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAClC,OACI,sBAAKc,UAAU,8BAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCDHO,EAAS,SAAC,GAAe,IAAdnB,EAAa,EAAbA,SAAa,ECDV,SAACA,GAAY,IAAD,EACTf,mBAAS,CAC/BsB,KAAK,GACLa,SAAQ,IAHuB,mBAC5BC,EAD4B,KACrBC,EADqB,KAsBnC,OAhBAC,qBAAU,WAENxB,EAAQC,GACHwB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,SAKtB,CAACpB,IAKIqB,EDlBsBK,CAAa1B,GAA9Ba,EAHqB,EAG1BN,KAAYa,EAHc,EAGdA,QAInB,OACI,qCACI,+BAAKpB,EAAL,OAECoB,GAAW,2CAEZ,qBAAKJ,UAAU,YAAf,SAESH,EAAOJ,KAAK,SAAAC,GAAG,OACZ,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEQtBgB,EA1BI,WAAK,IAAD,EAEe1C,mBAAS,CAAC,aAFzB,mBAEZQ,EAFY,KAEAT,EAFA,KAOnB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQS,EAAWgB,KAAI,SAAAmB,GAAC,OACZ,cAAC,EAAD,CAEA5B,SAAU4B,GADLA,Y,MChB7BC,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.58e976bb.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue,setInputValue]=useState('');\r\n\r\n    const handleSubmit=(e)=>{\r\n        e.preventDefault();\r\n        \r\n        if(inputValue.trim().length >2){\r\n        setCategories(categories =>[inputValue,...categories]);\r\n        setInputValue('');\r\n    }\r\n}\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n            type='text'\r\n            placeholder='Category'\r\n            value={inputValue}\r\n            onChange={(e)=>setInputValue(e.target.value)}\r\n            />\r\n        </form>\r\n    )\r\n }\r\n\r\n\r\n","\r\nexport const getGifs= async(category)=>{\r\n    const url=`http://api.giphy.com/v1/gifs/search?q=${encodeURI( category)}&limit=10&api_key=Y8CrPtAhsnCwFjnsCXQtX5VwJAfhZB2s`\r\n    const resp = await fetch(url);\r\n    const {data}= await resp.json();\r\n\r\n    const gift = data.map(img=>{\r\n        return{\r\n            id:img.id,\r\n            title:img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gift;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id,title,url}) => {\r\n    return (\r\n        <div className='card animate__fadeInDownBig'>\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import  react from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\n\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid= ({category}) =>{\r\n    \r\n    \r\n    const {data:images,loading}= useFetchGifs(category);\r\n\r\n    \r\n\r\n    return(\r\n        <>\r\n            <h3>{category} </h3>\r\n            \r\n            {loading && <p>loading...</p>}\r\n           \r\n            <div className='card-grid'>\r\n                {\r\n                     images.map( img=>(\r\n                        <GifGridItem \r\n                            key={img.id}\r\n                            {...img}/>\r\n                    ))\r\n                }\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}","import { useState,useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\nexport const useFetchGifs= (category)=>{\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n    //se ejecuta la instruccions solo cuando se renderiza por primera vez\r\n    useEffect(() => {\r\n\r\n        getGifs(category)\r\n            .then(imgs =>{\r\n                setState({\r\n                    data:imgs,\r\n                    loading:false\r\n                });\r\n\r\n            })\r\n\r\n    },[category])\r\n    \r\n\r\n   \r\n\r\n    return state;\r\n}","import React,{useState} from \"react\";\r\nimport { AddCategory } from \"./componets/AddCategory\";\r\nimport { GifGrid } from \"./componets/GifGrid\";\r\n\r\nconst GifExpertApp=()=>{\r\n\r\n    const [categories, setCategories]=useState(['One Puch'])\r\n\r\n   \r\n\r\n\r\n    return(\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n\r\n            <ul>\r\n                {\r\n                    categories.map(c=>(\r\n                        <GifGrid \r\n                        key={c}\r\n                        category={c}/>\r\n                    ))\r\n                }\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  \n    <GifExpertApp/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}